name: FastMODA CI/CD

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  release:
    types: [ created ]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}/fastmoda

jobs:
  # Test job
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ['3.9', '3.10', '3.11']
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Cache pip packages
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
    
    - name: Install dependencies
      run: |
        cd FastMODA
        pip install -r requirements.txt
        pip install pytest pytest-cov
    
    - name: Run tests
      run: |
        cd FastMODA
        python -m pytest test_features.py -v --cov=fastmoda --cov-report=xml
    
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./FastMODA/coverage.xml
        flags: unittests
        name: codecov-umbrella

  # Build Docker images
  build-docker:
    needs: test
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Extract metadata (tags, labels)
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
          type=sha
    
    - name: Build and push CPU image
      uses: docker/build-push-action@v5
      with:
        context: ./FastMODA
        file: ./FastMODA/Dockerfile
        target: base
        push: ${{ github.event_name != 'pull_request' }}
        tags: ${{ steps.meta.outputs.tags }}-cpu
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
    
    - name: Build and push GPU image
      uses: docker/build-push-action@v5
      with:
        context: ./FastMODA
        file: ./FastMODA/Dockerfile
        target: gpu
        push: ${{ github.event_name != 'pull_request' }}
        tags: ${{ steps.meta.outputs.tags }}-gpu
        labels: ${{ steps.meta.outputs.labels }}
        build-args: |
          CUDA_VERSION=11.8
        cache-from: type=gha
        cache-to: type=gha,mode=max

  # GPU testing job (runs on self-hosted runner with GPU)
  test-gpu:
    needs: test
    runs-on: [self-hosted, gpu]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Install dependencies with GPU support
      run: |
        cd FastMODA
        pip install -r requirements.txt
        pip install -r requirements-gpu.txt --index-url https://download.pytorch.org/whl/cu118
        pip install pytest
    
    - name: Test GPU availability
      run: |
        cd FastMODA
        python -c "from fastmoda.gpu_utils import get_gpu_info; import json; print(json.dumps(get_gpu_info(), indent=2))"
    
    - name: Run GPU benchmark
      run: |
        cd FastMODA
        python -c "from fastmoda.gpu_utils import benchmark_gpu_vs_cpu; import json; print(json.dumps(benchmark_gpu_vs_cpu(), indent=2))"

  # Deploy to production
  deploy:
    needs: [test, build-docker]
    runs-on: ubuntu-latest
    if: github.event_name == 'release'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Deploy to production server
      uses: appleboy/ssh-action@master
      with:
        host: ${{ secrets.PROD_HOST }}
        username: ${{ secrets.PROD_USER }}
        key: ${{ secrets.PROD_SSH_KEY }}
        script: |
          cd /opt/fastmoda
          docker-compose pull
          docker-compose up -d --no-deps --build fastmoda-cpu
          docker image prune -f
